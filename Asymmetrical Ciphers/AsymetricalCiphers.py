{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "635f971b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2ceb9c5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class AsymmetricalCipher:\n",
    "    \n",
    "    def set_PublicKey(self):\n",
    "        public_key = int(input(\"Type in your public key:\"))\n",
    "        return public_key\n",
    "    \n",
    "    def get_PublicKeyReceiver(self):\n",
    "        public_key = 33\n",
    "        return public_key\n",
    "    \n",
    "    def set_PrivateKey(self):\n",
    "        private_key = int(input(\"Set your secret key: \"))\n",
    "        return private_key\n",
    "    \n",
    "    def get_PrivateKeyReceiver(self):\n",
    "        private_key = 13\n",
    "        return private_key\n",
    "        \n",
    "    def get_PlainText(self):\n",
    "        message = str(input(\"Write down the message you want to send: \"))\n",
    "        return message\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f6bb5172",
   "metadata": {},
   "outputs": [],
   "source": [
    "class DiffieHellmanEncryption(AsymmetricalCipher):\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.PublicKey1 = self.set_PublicKey()\n",
    "        self.PublicKey2 = self.get_PublicKeyReceiver()\n",
    "        self.PrivateKey1 = self.set_PrivateKey()\n",
    "        self.PrivateKey2 = self.get_PrivateKeyReceiver()\n",
    "        self.SecretKey = self.Set_SecretKey()\n",
    "        self.printDetails()\n",
    "        self.PlainText = self.get_PlainText()\n",
    "        self.Encryption()\n",
    "        self.Decryption()\n",
    "    \n",
    "    def printDetails(self):\n",
    "        print(\"\")\n",
    "        print(\"Sender (You):\")\n",
    "        print(\"Public Key = \"+str(self.PublicKey1))\n",
    "        print(\"Private Key = \"+str(self.PrivateKey1))\n",
    "        print(\"Partial Key = \"+str(self.partialKey))\n",
    "        print(\"Secret Key = \"+str(self.SecretKey))\n",
    "        print(\"\")\n",
    "        print(\"Receiver:\")\n",
    "        print(\"Public Key = \"+str(self.PublicKey2))\n",
    "        print(\"Private Key = \"+str(self.PrivateKey2))\n",
    "        print(\"Partial Key = \"+str(self.partialKey_received))\n",
    "        print(\"Secret Key = \"+str(self.SecretKey))\n",
    "        print(\"\")\n",
    "    \n",
    "    def Power(self, number, power, modulo):\n",
    "        result = 1\n",
    "        while power:\n",
    "            result *= number\n",
    "            result = result % modulo\n",
    "            power -=1\n",
    "        return result\n",
    "    \n",
    "    def get_PartialKeyfromReceiver(self):\n",
    "        partial_key = self.Power(self.PublicKey1, self.PrivateKey2, self.PublicKey2)\n",
    "        return partial_key\n",
    "    \n",
    "    \n",
    "    def Set_SecretKey(self):\n",
    "        #The User that needs to perform the encryption \n",
    "        #will set his Public key as primary public key\n",
    "        #And the receivers public key as modulo public key\n",
    "        \n",
    "        #Formula Partial Key = (Public Key ^ Private Key) mod Public Key Receiver\n",
    "        self.partialKey = self.Power(self.PublicKey1, self.PrivateKey1, self.PublicKey2)\n",
    "        \n",
    "        #Assume we are sending this partial key to the receiver\n",
    "        \n",
    "        #As a response we get the receivers partial key\n",
    "        self.partialKey_received = self.get_PartialKeyfromReceiver()\n",
    "        \n",
    "        #With the received partial key we compute the full secret key\n",
    "        #Secret Key = (Receivers Partial Key ^ Private Key) mod Public Key Receiver\n",
    "        Secret_Key = self.Power(self.partialKey_received, self.PrivateKey1, self.PublicKey2)\n",
    "        \n",
    "        return Secret_Key\n",
    "        \n",
    "    def Encryption(self):\n",
    "        #Encryption consists of permutation of each letter \n",
    "        #with secret key places in ASCII code\n",
    "        self.Encrypted_text = \"\"\n",
    "        for character in self.PlainText:\n",
    "            self.Encrypted_text += chr(ord(character)+self.SecretKey)\n",
    "            \n",
    "        print(\"The plain text: \"+self.PlainText)\n",
    "        print(\"Encrypted: \"+self.Encrypted_text)\n",
    "    \n",
    "    def Decryption(self):\n",
    "        confirmation = str(input(\"Do you want to decrypt the message (as a receiver)? (y/n)\"))\n",
    "        if confirmation == \"n\":\n",
    "            return\n",
    "        \n",
    "        #If we need to decrypt a message from the receivers perspective\n",
    "        #we need first to compute the secret key\n",
    "        #Secret Key Receiver = (Partial Key Sender ^ Private Key Receiver) mod Public Key Receiver\n",
    "        Secret_Key = self.Power(self.partialKey, self.PrivateKey2, self.PublicKey2)\n",
    "        \n",
    "        #Now the decryption is the same process as encryption, but with back permuatation\n",
    "        self.Decrypted_text = \"\"\n",
    "        for character in self.Encrypted_text:\n",
    "            self.Decrypted_text += chr(ord(character)-Secret_Key)\n",
    "            \n",
    "        print(\"The encrypted text: \"+self.Encrypted_text)\n",
    "        print(\"Decrypted: \"+self.Decrypted_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "54d4b81a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    DH = DiffieHellmanEncryption()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
